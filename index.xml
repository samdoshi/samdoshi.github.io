<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sam Doshi</title>
    <link>http://samdoshi.com/index.xml</link>
    <description>Recent content on Sam Doshi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Fri, 14 Oct 2016 14:00:00 +0100</lastBuildDate>
    <atom:link href="http://samdoshi.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>AVR32 RAM and ROM usage</title>
      <link>http://samdoshi.com/post/2016/10/avr32-ram-and-rom-usage/</link>
      <pubDate>Fri, 14 Oct 2016 14:00:00 +0100</pubDate>
      
      <guid>http://samdoshi.com/post/2016/10/avr32-ram-and-rom-usage/</guid>
      <description>&lt;p&gt;When developing for embedded devices it&amp;rsquo;s incredibly important to keep a track of your RAM and ROM usage. In order to do so, we can use the Unix utility &lt;code&gt;size&lt;/code&gt;, in particular for the AVR32, we use the &lt;code&gt;avr32-size&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;If you want the quick answer:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Run &lt;code&gt;avr32-size -A &amp;lt;insert name&amp;gt;.elf&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;.heap&lt;/code&gt; size is effectively your free RAM (&lt;code&gt;malloc&lt;/code&gt; usage aside).&lt;/p&gt;

&lt;p&gt;Your ROM size is approximately &lt;code&gt;.data&lt;/code&gt; + &lt;code&gt;.rodata&lt;/code&gt; + &lt;code&gt;.text&lt;/code&gt;, to which you can add your &lt;code&gt;.flash_nvram&lt;/code&gt; to get an approximation of total flash ROM use.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Read on for the gory details&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;output-formats&#34;&gt;Output formats&lt;/h2&gt;

&lt;p&gt;Two output formats for the &lt;code&gt;avr32-size&lt;/code&gt; command exist, the simpler &amp;lsquo;Berkeley&amp;rsquo; style, e.g. &lt;code&gt;avr32-size -B teletype.elf&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span&gt;&lt;/span&gt;   text	   data	    bss	    dec	    hex	filename
  81034	   7504	 237872	 326410	  4fb0a	teletype.elf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Or the more complex &amp;lsquo;SysV&amp;rsquo; style, e.g. &lt;code&gt;avr32-size -A teletype.elf&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span&gt;&lt;/span&gt;teletype.elf  :
section               size         addr
.reset                8204   2147483648
.rela.got                0   2147491852
.init                   26   2147491852
.text                55604   2147491880
.exception             512   2147547648
.fini                   24   2147548160
.rodata              16664   2147548184
.dalign                  4            4
.ctors                   8            8
.dtors                   8           16
.jcr                     4           24
.got                     0           28
.data                 7484           28
.balign                  0         7512
.bss                  8064         7512
.heap                74536        15576
.comment                47            0
.debug_aranges        8624            0
.debug_pubnames      20090            0
.debug_info         279439            0
.debug_abbrev        38429            0
.debug_line         161921            0
.debug_frame         25408            0
.debug_str           53842            0
.debug_loc           76994            0
.debug_macinfo    34421509            0
.stack                8192        90112
.flash_nvram        147076   2147745792
.debug_ranges        14936            0
Total             35427649
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We&amp;rsquo;re going to use the SysV style, the Berkeley style doesn&amp;rsquo;t include a useful value for &lt;code&gt;BSS&lt;/code&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fn-berkeley&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:fn-berkeley&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h2 id=&#34;enhancing-the-output-of-avr32-size&#34;&gt;Enhancing the output of &lt;code&gt;avr32-size&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Before we go further, let&amp;rsquo;s enhance the output of &lt;code&gt;avr32-size&lt;/code&gt;, firstly I would like both the decimal and hexadecimal values side by side:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span&gt;&lt;/span&gt;pr -w &lt;span class=&#34;m&#34;&gt;85&lt;/span&gt; -m -t &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
   &amp;lt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;avr32-size -Ad teletype.elf&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
   &amp;lt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;avr32-size -Ax teletype.elf &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; cut -c 19-&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next, let&amp;rsquo;s remove the &lt;code&gt;.debug_*&lt;/code&gt; lines and the headers and totals:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span&gt;&lt;/span&gt;pr -w &lt;span class=&#34;m&#34;&gt;85&lt;/span&gt; -m -t &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
   &amp;lt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;avr32-size -Ad teletype.elf&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
   &amp;lt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;avr32-size -Ax teletype.elf &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; cut -c 19-&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep &lt;span class=&#34;s1&#34;&gt;&amp;#39;^\..*&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep -v &lt;span class=&#34;s1&#34;&gt;&amp;#39;^.debug.*&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And finally, let&amp;rsquo;s sort by address:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span&gt;&lt;/span&gt;pr -w &lt;span class=&#34;m&#34;&gt;85&lt;/span&gt; -m -t &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
   &amp;lt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;avr32-size -Ad teletype.elf&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
   &amp;lt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;avr32-size -Ax teletype.elf &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; cut -c 19-&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep &lt;span class=&#34;s1&#34;&gt;&amp;#39;^\..*&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep -v &lt;span class=&#34;s1&#34;&gt;&amp;#39;^.debug.*&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sort -k 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;understanding-the-output&#34;&gt;Understanding the output&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s take our enhanced command and run it against a built version of Teletype&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fn-commit&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:fn-commit&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;, we get the following output (to which I have added a header and highlighted the interesting lines).&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span&gt;&lt;/span&gt;Name            Size (dec)   Addr (dec)  Size (hex)   Addr (hex)
================================================================
.comment                47            0        0x2f          0x0
.dalign                  4            4         0x4          0x4
.ctors                   8            8         0x8          0x8
.dtors                   8           16         0x8         0x10
.jcr                     4           24         0x4         0x18
.got                     0           28         0x0         0x1c
&lt;span class=&#34;hll&#34;&gt;.data                 7484           28      0x1d3c         0x1c
&lt;/span&gt;.balign                  0         7512         0x0       0x1d58
&lt;span class=&#34;hll&#34;&gt;.bss                  8064         7512      0x1f80       0x1d58
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;.heap                74536        15576     0x12328       0x3cd8
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;.stack                8192        90112      0x2000      0x16000
&lt;/span&gt;.reset                8204   2147483648      0x200c   0x80000000
.rela.got                0   2147491852         0x0   0x8000200c
.init                   26   2147491852        0x1a   0x8000200c
&lt;span class=&#34;hll&#34;&gt;.text                55604   2147491880      0xd934   0x80002028
&lt;/span&gt;.exception             512   2147547648       0x200   0x8000fa00
.fini                   24   2147548160        0x18   0x8000fc00
&lt;span class=&#34;hll&#34;&gt;.rodata              16664   2147548184      0x4118   0x8000fc18
&lt;/span&gt;&lt;span class=&#34;hll&#34;&gt;.flash_nvram        147076   2147745792     0x23e84   0x80040000
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;AT32UC3B0512&lt;/code&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fn-at32uc3b0512&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:fn-at32uc3b0512&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; used by the Teletype has 96kb of RAM and 512kb of flash ROM. The address space is unified, so a 32-bit pointer can refer to a location in RAM or in ROM. The RAM starts at location &lt;code&gt;0x0&lt;/code&gt;, the ROM starts at &lt;code&gt;0x80000000&lt;/code&gt;. For those MCUs that support SDRAM, that would start at &lt;code&gt;0xD0000000&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The above table gives the name, size and address for each section of the unified address space, sorted by memory address. There can be gaps between sections, for example there is a gap of 180,944 bytes between the end of &lt;code&gt;.rodata&lt;/code&gt; and the start of &lt;code&gt;.flash_nvram&lt;/code&gt;, later on we&amp;rsquo;ll see that there is a copy of &lt;code&gt;.data&lt;/code&gt; stored there for use at initialisation.&lt;/p&gt;

&lt;h2 id=&#34;ram&#34;&gt;RAM&lt;/h2&gt;

&lt;p&gt;We aren&amp;rsquo;t interested in all the sections in RAM, for example &lt;code&gt;.comment&lt;/code&gt; contains the name of the compiler&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fn-comment&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:fn-comment&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; and will be striped out before the final &lt;code&gt;.hex&lt;/code&gt; file is created.&lt;/p&gt;

&lt;p&gt;We are interested in the following (see &lt;a href=&#34;https://en.wikipedia.org/wiki/Data_segment&#34;&gt;Wikipedia&lt;/a&gt; for more info on these):&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;.data&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;This is used for initialised data, it takes up space in &lt;em&gt;both&lt;/em&gt; RAM and ROM, unfortunately the ROM address is not given in the output of &lt;code&gt;avr32-size&lt;/code&gt;, we&amp;rsquo;ll need &lt;code&gt;avr32-objdump&lt;/code&gt; for that (see later.)&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;.bss&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;This is used for uninitialised data, it only takes up space in RAM.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;.stack&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;The call stack. The size is set by the &lt;a href=&#34;https://github.com/monome/libavr32/blob/86af65cef1130e4a40dd3616add84198f521bd0b/src/link_uc3b0512.lds&#34;&gt;linker script&lt;/a&gt;, it may be changed by updating the linker variable &lt;code&gt;__stack_size__&lt;/code&gt;, ideally by updating &lt;code&gt;LDFLAGS&lt;/code&gt; in &lt;code&gt;config.mk&lt;/code&gt;,
e.g. &lt;code&gt;LDFLAGS = -Wl,-e,_trampoline,--defsym=__stack_size__=0x1000&lt;/code&gt; for a 4096 byte stack.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;.heap&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;By default &lt;strong&gt;all unused RAM is allocated to the heap&lt;/strong&gt; for use with &lt;code&gt;malloc&lt;/code&gt; and such. Override the linker variable &lt;code&gt;__heap_size__&lt;/code&gt; if you wish to change this (though I can&amp;rsquo;t think of a reason as to why you would).&lt;/dd&gt;
&lt;/dl&gt;

&lt;h2 id=&#34;rom&#34;&gt;ROM&lt;/h2&gt;

&lt;p&gt;The ROM contains your code and any read-only data, as well as the initial value for any read-write data. It also contains the NVRAM&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fn-nvram&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:fn-nvram&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;, which can be read directly, but writes must go via the &lt;a href=&#34;https://github.com/monome/libavr32/blob/ec718209606be5df516496c474df9ae82df179ee/asf/avr32/drivers/flashc/flashc.h&#34;&gt;flash controller interface&lt;/a&gt;.&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;.text&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;This is the code segment, it contains your program.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;.data&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;A read only copy of your initialised data. It is copied from ROM to RAM after the bootloader has run.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;.rodata&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Constant read-only data.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;.flash_nvram&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;The location of the NVRAM data, plus the size of any variables you&amp;rsquo;ve explicitly stored in there via &lt;code&gt;__attribute__((__section__(&amp;quot;.flash_nvram&amp;quot;)))&lt;/code&gt;. The total size of flash that you wish to dedicate to NVRAM usage is configured with the linker variable &lt;code&gt;__flash_nvram_size__&lt;/code&gt; (ideally set in &lt;code&gt;LDFLAGS&lt;/code&gt;).&lt;/dd&gt;
&lt;/dl&gt;

&lt;h2 id=&#34;initalised-vs-uninitalised-vs-constant-data&#34;&gt;Initalised vs. uninitalised vs. constant data&lt;/h2&gt;

&lt;p&gt;Understanding the difference between initialised, uninitialised and constant data will help you understand where they are stored. The following only applies to global data. Local data lives on the stack.&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;Initialised data&lt;/dt&gt;
&lt;dd&gt;This takes the form &lt;code&gt;int x = 10;&lt;/code&gt; and is stored in &lt;code&gt;.data&lt;/code&gt;, which occupies space in &lt;em&gt;both&lt;/em&gt; ROM and RAM.&lt;/dd&gt;
&lt;dt&gt;Uninitialised data&lt;/dt&gt;
&lt;dd&gt;This takes the form &lt;code&gt;int x;&lt;/code&gt; and is stored in &lt;code&gt;.bss&lt;/code&gt; in RAM only.&lt;/dd&gt;
&lt;dt&gt;Constant data&lt;/dt&gt;
&lt;dd&gt;This takes the form &lt;code&gt;const int x = 10;&lt;/code&gt; and is stored in &lt;code&gt;.rodata&lt;/code&gt; in ROM only.&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;It&amp;rsquo;s worth being aware that the compiler can and will try to make optimisations for you. So constants will be in-lined if possible.&lt;/p&gt;

&lt;h2 id=&#34;vma-and-lma-using-avr32-objdump&#34;&gt;VMA and LMA, using &lt;code&gt;avr32-objdump&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Unfortunately &lt;code&gt;avr32-size -A&lt;/code&gt; doesn&amp;rsquo;t list the ROM address for &lt;code&gt;.data&lt;/code&gt;, in order to discover the address we need to use &lt;code&gt;avr32-objdump&lt;/code&gt; and understand the difference between VMA and LMA.&lt;/p&gt;

&lt;p&gt;Quoting &lt;a href=&#34;http://www.atmel.com/images/doc32158.pdf&#34;&gt;AVR32795: Using the GNU Linker Scripts on
AVR UC3 Devices&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;3.3 VMA and LMA&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Every loadable or allocatable output section has two addresses. The first is the &lt;strong&gt;VMA, or virtual memory address&lt;/strong&gt;. This is the address the section will have when the output file is run. The second is the &lt;strong&gt;LMA, or load memory address&lt;/strong&gt;. This is the address at which the section will be loaded. In most cases the two addresses will be the same.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;An example of when the LMA and VMA might be different is when a data section is loaded into ROM, and then copied into RAM when the program starts up&lt;/strong&gt; (a technique often used to initialize global variables in a ROM-based system). In this case, the ROM address would be the LMA and the RAM address would be the VMA.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We can use &lt;code&gt;avr32-objdump&lt;/code&gt; to list the VMA and LMA:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span&gt;&lt;/span&gt;avr32-objdump -h teletype.elf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I have omitted the &lt;code&gt;.debug_*&lt;/code&gt; sections and highlighted the &lt;code&gt;.data&lt;/code&gt; and &lt;code&gt;.rodata&lt;/code&gt; sections. We can see that the VMA and LMA are different for &lt;code&gt;.data&lt;/code&gt;, but not for &lt;code&gt;.rodata&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span&gt;&lt;/span&gt;teletype.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        0000200c  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  8000200c  8000200c  0000240c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .init         0000001a  8000200c  8000200c  0000240c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         0000d944  80002028  80002028  00002428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .exception    00000200  8000fa00  8000fa00  0000fe00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .fini         00000018  8000fc00  8000fc00  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
&lt;span class=&#34;hll&#34;&gt;  6 .rodata       00004118  8000fc18  8000fc18  00010018  2**2
&lt;/span&gt;                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  8 .ctors        00000008  00000008  80013d30  00014408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .dtors        00000008  00000010  80013d38  00014410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .jcr          00000004  00000018  80013d40  00014418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .got          00000000  0000001c  80013d44  0001441c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
&lt;span class=&#34;hll&#34;&gt; 12 .data         00005d3c  0000001c  80013d44  0001441c  2**2
&lt;/span&gt;                  CONTENTS, ALLOC, LOAD, DATA
 13 .balign       00000000  00005d58  80019a80  0001a158  2**0
                  ALLOC
 14 .bss          00001f80  00005d58  00005d58  00000000  2**2
                  ALLOC
 15 .heap         0000e328  00007cd8  00007cd8  00000000  2**0
                  ALLOC
 16 .comment      0000002f  00000000  00000000  0001a158  2**0
                  CONTENTS, READONLY
 26 .stack        00002000  00016000  00016000  00000000  2**0
                  ALLOC
 27 .flash_nvram  00023e84  80040000  80019a80  0001a400  2**1
                  ALLOC
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;RAM usage is governed by the size of &lt;code&gt;.data&lt;/code&gt;, &lt;code&gt;.bss&lt;/code&gt; and &lt;code&gt;.stack&lt;/code&gt;. These are the things we have control over. Any free RAM is allocated to the &lt;code&gt;.heap&lt;/code&gt;, in effect this is how much free RAM you have (&lt;code&gt;malloc&lt;/code&gt; use aside).&lt;/p&gt;

&lt;p&gt;The flash ROM is divided into ROM and NVRAM as determined by the linker variable &lt;code&gt;__flash_nvram_size__&lt;/code&gt;. The size of ROM is primarily determined by the size of &lt;code&gt;.text&lt;/code&gt;, &lt;code&gt;.data&lt;/code&gt; and &lt;code&gt;.rodata&lt;/code&gt;. NVRAM usage via named sections in your source code is given by &lt;code&gt;.flash_nvram&lt;/code&gt;, this will not include any manual flash usage via the &lt;a href=&#34;https://github.com/monome/libavr32/blob/ec718209606be5df516496c474df9ae82df179ee/asf/avr32/drivers/flashc/flashc.h&#34;&gt;flash controller&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more information see:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://linux.die.net/man/1/size&#34;&gt;&lt;code&gt;size&lt;/code&gt; man page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://linux.die.net/man/1/objdump&#34;&gt;&lt;code&gt;objdump&lt;/code&gt; man page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://linux.die.net/man/1/readelf&#34;&gt;&lt;code&gt;readelf&lt;/code&gt; man page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.atmel.com/Images/doc32074.pdf&#34;&gt;AVR32006: Getting started with GCC for AVR32&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.atmel.com/images/doc32158.pdf&#34;&gt;AVR32795: Using the GNU Linker Scripts on AVR UC3 Devices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.atmel.com/Images/Atmel-42370-Optimizing-ASF-Code-Size-to-Minimize-Flash-and-RAM-Usage_ApplicationNote_AT08569.pdf&#34;&gt;AT08569: Optimizing ASF Code Size to Minimize Flash
and RAM Usage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:fn-berkeley&#34;&gt;It appears to include &lt;code&gt;.flash_nvram&lt;/code&gt;, plus possibly &lt;code&gt;.heap&lt;/code&gt; and &lt;code&gt;.stack&lt;/code&gt; in the it&amp;rsquo;s calculation of &lt;code&gt;BSS&lt;/code&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fn-berkeley&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:fn-commit&#34;&gt;Commit &lt;a href=&#34;https://github.com/monome/teletype/commit/220ea9d98de47b5a46507050266379d6599e3110&#34;&gt;&lt;code&gt;220ea9d&lt;/code&gt;&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fn-commit&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:fn-at32uc3b0512&#34;&gt;Also used by Ansible, see the &lt;a href=&#34;http://www.atmel.com/devices/AT32UC3B0512.aspx&#34;&gt;Atmel website&lt;/a&gt;. White Whale, Meadowphysics and Earthsea all use the &lt;code&gt;AT32UC3B0256&lt;/code&gt; which has 32kb of RAM and 256kb of flash ROM.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fn-at32uc3b0512&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:fn-comment&#34;&gt;&lt;code&gt;avr32-readelf -p .comment teletype.elf&lt;/code&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fn-comment&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:fn-nvram&#34;&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Non-volatile_memory&#34;&gt;Non-volatile RAM&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fn-nvram&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>An introduction to Git submodules</title>
      <link>http://samdoshi.com/post/2016/03/git-submodules/</link>
      <pubDate>Sun, 20 Mar 2016 16:00:00 +0000</pubDate>
      
      <guid>http://samdoshi.com/post/2016/03/git-submodules/</guid>
      <description>&lt;p&gt;Over on the Monome online community &lt;a href=&#34;http://llllllll.co/t/github-reorganization/2698?u=sam&#34;&gt;lines&lt;/a&gt;, we&amp;rsquo;ve been discussing breaking up the monolithic git repository used for the &lt;a href=&#34;http://monome.org/modular/&#34;&gt;Eurorack&lt;/a&gt; modules&amp;rsquo; &lt;a href=&#34;https://github.com/tehn/mod&#34;&gt;firmware&lt;/a&gt;. This is just a brief overview of Git submodules to see if they are a good fit for us.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A submodule allows you to keep another Git repository in a subdirectory of your repository. The other repository has its own history, which does not interfere with the history of the current repository. &lt;strong&gt;This can be used to have external dependencies such as third party libraries for example.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://git-scm.com/docs/git-submodule&#34;&gt;The Git submodule man page&lt;/a&gt;&lt;/em&gt; &lt;em&gt;(emphasis mine)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let&amp;rsquo;s work through a simple example to see how it works&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;

&lt;p&gt;First, we&amp;rsquo;ll make our shared library repo &lt;code&gt;lib&lt;/code&gt; and add some commits.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span&gt;&lt;/span&gt;mkdir lib
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; lib
git init
touch a
git add a
git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;quot;added a&amp;quot;&lt;/span&gt;
git mv a b
git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;quot;mv a b&amp;quot;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ..
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, let&amp;rsquo;s create a repo &lt;code&gt;repo1&lt;/code&gt; (that will use the library via a submodule).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span&gt;&lt;/span&gt;mkdir repo1
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; repo1
git init
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ..
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This gives us the following files (via &lt;code&gt;tree&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span&gt;&lt;/span&gt;.
├── lib
│   └── b
└── repo1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let&amp;rsquo;s add the submodule to &lt;code&gt;repo1&lt;/code&gt; as the directory &lt;code&gt;common&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; repo1
git submodule add ../lib common
git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;quot;added submodule&amp;quot;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ..
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And again, the output of &lt;code&gt;tree&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span&gt;&lt;/span&gt;.
├── lib
│   └── b
└── repo1
    └── common
        └── b
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we have a repo &lt;code&gt;repo1&lt;/code&gt; that contains a submodule in the directory &lt;code&gt;common&lt;/code&gt; from repo &lt;code&gt;lib&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;making-changes-to-lib&#34;&gt;Making changes to &lt;code&gt;lib&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s make a change to &lt;code&gt;lib&lt;/code&gt; to demonstrate what submodules allow us to do.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; lib
git mv b c
git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;quot;mv b c&amp;quot;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ..
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Again, consider the output of &lt;code&gt;tree&lt;/code&gt;. Notice how &lt;code&gt;repo1/common&lt;/code&gt; still contains &lt;code&gt;b&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span&gt;&lt;/span&gt;.
├── lib
│   └── c
└── repo1
    └── common
        └── b
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let&amp;rsquo;s clone &lt;code&gt;repo1&lt;/code&gt; to &lt;code&gt;repo1_clone&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span&gt;&lt;/span&gt;git clone repo1 repo1_clone
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That gives us:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span&gt;&lt;/span&gt;.
├── lib
│   └── c
├── repo1
│   └── common
│       └── b
└── repo1_clone
    └── common
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Hmm, why hasn&amp;rsquo;t &lt;code&gt;repo1_clone/common&lt;/code&gt; got any files in it?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; repo1_clone
git submodule update --init
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ..
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That&amp;rsquo;s better&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fn-recursive&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:fn-recursive&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span&gt;&lt;/span&gt;.
├── lib
│   └── c
├── repo1
│   └── common
│       └── b
└── repo1_clone
    └── common
        └── b
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The important thing to note is that both &lt;code&gt;repo1&lt;/code&gt; and &lt;code&gt;repo1_clone&lt;/code&gt; still contain &lt;code&gt;b&lt;/code&gt; rather than &lt;code&gt;c&lt;/code&gt;. This is because Git tracks a particular commit for the submodule rather than a branch or &lt;code&gt;HEAD&lt;/code&gt;. You need to explicitly update the parent repo to track a new commit. This is great as it means changes to the upstream repo of the submodule are not forced upon us.&lt;/p&gt;

&lt;p&gt;The output of &lt;code&gt;git log --pretty=&amp;quot;format:%H %s&amp;quot;&lt;/code&gt; in the &lt;code&gt;lib&lt;/code&gt; repo is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span&gt;&lt;/span&gt;1e5717c64e1150ca1da08521a24d8469c2bdde00 mv b c
86a5b293fa8f860730cd96c11b29b5f03fc2a60e mv a b
3c163ca8fcf336907e1b2a121f25bd550a71e5e3 added a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The output of &lt;code&gt;git submodule status&lt;/code&gt; in &lt;code&gt;repo1&lt;/code&gt; is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span&gt;&lt;/span&gt;86a5b293fa8f860730cd96c11b29b5f03fc2a60e common (heads/master)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice how the commit SHA for the &lt;code&gt;common&lt;/code&gt; entry in &lt;code&gt;git submodule status&lt;/code&gt; matches the second entry in the log for &lt;code&gt;lib&lt;/code&gt;. This shouldn&amp;rsquo;t come as a surprise, as our submodule hasn&amp;rsquo;t been updated to the latest changes in &lt;code&gt;lib&lt;/code&gt; yet.&lt;/p&gt;

&lt;h2 id=&#34;updating-submodules&#34;&gt;Updating submodules&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s update &lt;code&gt;repo1&lt;/code&gt; to incorporate the changes made to &lt;code&gt;lib&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; repo1/common
git pull
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ..
git status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span&gt;&lt;/span&gt;On branch master
Changes not staged for commit:
  (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed)
  (use &amp;quot;git checkout -- &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working directory)

        modified:   common (new commits)

no changes added to commit (use &amp;quot;git add&amp;quot; and/or &amp;quot;git commit -a&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The output of &lt;code&gt;git status&lt;/code&gt; is telling us that we have modified &lt;code&gt;common&lt;/code&gt;, we need to commit those changes to &lt;code&gt;repo1&lt;/code&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fn-change&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:fn-change&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span&gt;&lt;/span&gt;git add common
git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;quot;update common&amp;quot;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ..
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now the output of &lt;code&gt;tree&lt;/code&gt; is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span&gt;&lt;/span&gt;.
├── lib
│   └── c
├── repo1
│   └── common
│       └── c
└── repo1_clone
    └── common
        └── b
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The only thing left to do is to update &lt;code&gt;repo1_clone&lt;/code&gt; to reflect those changes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; repo1_clone
git pull
git submodule update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;git pull&lt;/code&gt; updates &lt;code&gt;repo1_clone&lt;/code&gt; to match &lt;code&gt;repo1&lt;/code&gt;, but won&amp;rsquo;t update the &lt;code&gt;common&lt;/code&gt; directory. Assuming that &lt;code&gt;common&lt;/code&gt; is clean, you can run &lt;code&gt;git submodule update&lt;/code&gt; to update &lt;code&gt;common&lt;/code&gt; to the correct commit of &lt;code&gt;lib&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The final output of &lt;code&gt;tree&lt;/code&gt; is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span&gt;&lt;/span&gt;.
├── lib
│   └── c
├── repo1
│   └── common
│       └── c
└── repo1_clone
    └── common
        └── c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;taking-things-further&#34;&gt;Taking things further&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;common&lt;/code&gt; directories in &lt;code&gt;repo1&lt;/code&gt; and &lt;code&gt;repo1_clone&lt;/code&gt; are normal Git repos, that are cloned from &lt;code&gt;lib&lt;/code&gt;. You can do all the normal things inside them that you would in any other Git repo: &lt;code&gt;branch&lt;/code&gt;, &lt;code&gt;checkout&lt;/code&gt;, &lt;code&gt;commit&lt;/code&gt;, &lt;code&gt;pull&lt;/code&gt; and even &lt;code&gt;push&lt;/code&gt;. So if the work you&amp;rsquo;re doing on the &lt;code&gt;lib&lt;/code&gt; repo is best done in the context of &lt;code&gt;repo1&lt;/code&gt;, you can make your changes and commits in &lt;code&gt;repo1/common&lt;/code&gt;&amp;mdash;you just need to remember to commit the directory &lt;code&gt;common&lt;/code&gt; to &lt;code&gt;repo1&lt;/code&gt; when you want &lt;code&gt;repo1&lt;/code&gt; to be updated to reference the new commits you&amp;rsquo;ve made to &lt;code&gt;lib&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:fn-recursive&#34;&gt;As an aside, we could have used &lt;code&gt;git clone repo1 repo1_clone --recursive&lt;/code&gt; for our initial clone to avoid having to use &lt;code&gt;git submodule update --init&lt;/code&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fn-recursive&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:fn-change&#34;&gt;If we change our mind, we can run &lt;code&gt;git submodule update&lt;/code&gt; to revert the submodule (assuming that it is &lt;em&gt;clean&lt;/em&gt;)
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fn-change&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Euclidean rhythms on the Monome Teletype</title>
      <link>http://samdoshi.com/post/2016/03/teletype-euclidean/</link>
      <pubDate>Sun, 20 Mar 2016 14:00:00 +0000</pubDate>
      
      <guid>http://samdoshi.com/post/2016/03/teletype-euclidean/</guid>
      <description>&lt;p&gt;Earlier this year I did some work on a Euclidean rhythm operator for the &lt;a href=&#34;http://monome.org/docs/modular/teletype/&#34;&gt;Monome Teletype&lt;/a&gt;. Here is the &lt;a href=&#34;https://github.com/tehn/mod/pull/68&#34;&gt;pull request&lt;/a&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fn-bugfix&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:fn-bugfix&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, the &lt;a href=&#34;https://github.com/tehn/mod/releases/tag/v1.12&#34;&gt;beta firmware&lt;/a&gt;, and there is also a thread to discuss it on &lt;a href=&#34;http://llllllll.co/t/a-euclidean-rhythm-operator-for-the-teletype/2344?u=sam&#34;&gt;lines&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;video-container&#34;&gt;
    &lt;iframe class=&#34;youtube-player&#34; type=&#34;text/html&#34; width=&#34;100%&#34; height=&#34;auto&#34; src=&#34;https://www.youtube.com/embed/f2FMVaVkiDo?rel=0&amp;modestbranding=1&#34; allowfullscreen frameborder=&#34;0&#34;&gt;
    &lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;euclidean-rhythms&#34;&gt;Euclidean rhythms&lt;/h2&gt;

&lt;p&gt;Euclidean rhythms were first described by Godfried Toussaint in his 2005 paper &lt;a href=&#34;http://cgm.cs.mcgill.ca/~godfried/publications/banff.pdf&#34;&gt;&amp;ldquo;The Euclidean Algorithm Generates Traditional Musical Rhythms&amp;rdquo;&lt;/a&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fn-citation&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:fn-citation&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;. From the abstract:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;em&gt;Euclidean&lt;/em&gt; algorithm (which comes down to us from Euclid&amp;rsquo;s &lt;em&gt;Elements&lt;/em&gt;) computes the greatest common divisor of two given integers. It is shown here that the structure of the Euclidean algorithm may be used to generate, very efficiently, a large family of rhythms used as timelines (&lt;em&gt;ostinatos&lt;/em&gt;), in sub-Saharan African music in particular, and world music in general. These rhythms, here dubbed &lt;em&gt;Euclidean&lt;/em&gt; rhythms, have the property that their onset patterns are distributed as evenly as possible.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once you&amp;rsquo;re more familiar with how they work, it&amp;rsquo;s well worth having a look through the &lt;a href=&#34;http://cgm.cs.mcgill.ca/~godfried/publications/banff.pdf&#34;&gt;paper&lt;/a&gt;. There is plenty of interesting information in there (along with all the maths).&lt;/p&gt;

&lt;p&gt;In essence a Euclidean rhythm evenly spreads out a numbers of beats (or &lt;em&gt;fill&lt;/em&gt;), along a repeating sequence of a given &lt;em&gt;length&lt;/em&gt;. Thus, the Euclidean rhythm &lt;em&gt;fill=4, length=16&lt;/em&gt;, is &lt;code&gt;x...x...x...x...&lt;/code&gt; (a.k.a. four on the floor at 16&lt;sup&gt;th&lt;/sup&gt; beats). Given that the rhythm repeats, this is more efficiently given as &lt;em&gt;fill=1, length=4&lt;/em&gt;: &lt;code&gt;x...&lt;/code&gt;. More interesting examples are in the &lt;a href=&#34;http://cgm.cs.mcgill.ca/~godfried/publications/banff.pdf&#34;&gt;paper&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;on-the-teletype&#34;&gt;On the Teletype&lt;/h2&gt;

&lt;p&gt;On the Teletype, Euclidean rhythms are implemented with a new operator, &lt;code&gt;ER&lt;/code&gt; as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span&gt;&lt;/span&gt;ER fill length step
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The operator either returns a &lt;code&gt;0&lt;/code&gt; (i.e. no beat) or a &lt;code&gt;1&lt;/code&gt; (a beat) for a given Euclidean rhythm, where &lt;em&gt;fill&lt;/em&gt; is the number of played beats and &lt;em&gt;length&lt;/em&gt; is the length of a single sequence (as previously described). The 3&lt;sup&gt;rd&lt;/sup&gt; parameter, &lt;em&gt;step&lt;/em&gt;, is the value of the rhythm at a given step. Particular care must be given as &lt;em&gt;step&lt;/em&gt; is &lt;strong&gt;0-based&lt;/strong&gt; like many other operations on the Teletype, i.e. the first step is 0, and the last step in a sequence that has length 16 is 15!&lt;/p&gt;

&lt;p&gt;Both &lt;em&gt;fill&lt;/em&gt; and &lt;em&gt;length&lt;/em&gt; accept values between 1 and 32 inclusive&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fn-values&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:fn-values&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;, where &lt;em&gt;fill&lt;/em&gt; &amp;le; &lt;em&gt;length&lt;/em&gt;. &lt;em&gt;Step&lt;/em&gt; may be any number&amp;mdash;it is modulo (or wrapped) with the length, so that it is always in bounds. Any invalid input results in the operator returning a &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;some-simple-examples&#34;&gt;Some simple examples&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s look at the example of &lt;em&gt;fill=4, length=16&lt;/em&gt;, i.e. &lt;code&gt;x...x...x...x...&lt;/code&gt;. (These are best entered in &lt;em&gt;LIVE mode&lt;/em&gt;.)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ER 4 16 0&lt;/code&gt; returns a &lt;code&gt;1&lt;/code&gt; &lt;small&gt;(remember 0 is the first step)&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ER 4 16 1&lt;/code&gt; returns a &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ER 4 16 2&lt;/code&gt; returns a &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ER 4 16 3&lt;/code&gt; returns a &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ER 4 16 4&lt;/code&gt; returns a &lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ER 4 16 -1&lt;/code&gt; returns a &lt;code&gt;0&lt;/code&gt; &lt;small&gt;(negative indices can be useful as we&amp;rsquo;ll see&amp;hellip;)&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ER 4 16 -4&lt;/code&gt; returns a &lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s create a simple script that outputs a four on the floor rhythm by using the &lt;code&gt;ER&lt;/code&gt; operator. Enter the following scripts as &lt;code&gt;I&lt;/code&gt; and &lt;code&gt;SCRIPT 1&lt;/code&gt;, and then supply a 16&lt;sup&gt;th&lt;/sup&gt; note trigger to input 1.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;I:&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span&gt;&lt;/span&gt;T 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;SCRIPT 1:&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span&gt;&lt;/span&gt;IF ER 4 16 T : TR.PULSE A
T ADD 1 T
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We&amp;rsquo;re using &lt;code&gt;T&lt;/code&gt; to hold which step we&amp;rsquo;re on. We can update &lt;code&gt;SCRIPT 1&lt;/code&gt; to add a second output:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SCRIPT 1:&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span&gt;&lt;/span&gt;IF ER 4 16 T : TR.PULSE A
IF ER 6 16 T : TR.PULSE B
T ADD 1 T
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;onset-or-rotation-or-offset&#34;&gt;Onset (or rotation or offset)&lt;/h2&gt;

&lt;p&gt;You might have noticed while playing with the above example that certain combinations of rhythms can&amp;rsquo;t be achieved as things stand, for example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span&gt;&lt;/span&gt;A: x...x...x...x...
B: ..x...x...x...x.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In order to create this rhythm we need to &lt;em&gt;rotate&lt;/em&gt; one rhythm against the other. This is sometimes call the offset or the onset. In fact in our example rhythm B is the same A, but rotated 2 steps forwards (or backwards). Let&amp;rsquo;s modify &lt;code&gt;SCRIPT 1&lt;/code&gt; again:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SCRIPT 1:&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span&gt;&lt;/span&gt;IF ER 4 16 T : TR.PULSE A
Y SUB T 2
IF ER 4 16 Y : TR.PULSE B
T ADD 1 T
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We&amp;rsquo;ve had to introduce another variable &lt;code&gt;Y&lt;/code&gt; as we can&amp;rsquo;t fit everything on one line&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fn-yet&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:fn-yet&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;. One thing that might not be obvious initially is that if we want to rotate a rhythm forwards we need to &lt;code&gt;SUB&lt;/code&gt;, if we want to rotate a rhythm backwards we need to &lt;code&gt;ADD&lt;/code&gt;. Thus if we want to use rotation with our Euclidean rhythms we can use the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span&gt;&lt;/span&gt;ER fill length SUB step rotation
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;where &lt;em&gt;rotation&lt;/em&gt; is the number of steps &lt;em&gt;forward&lt;/em&gt; we wish to rotate the rhythm.&lt;/p&gt;

&lt;h2 id=&#34;a-four-channel-euclidean-drum-machine&#34;&gt;A four channel Euclidean drum machine&lt;/h2&gt;

&lt;p&gt;Finally, let&amp;rsquo;s recreate part of the drum machine from the video at the top of the page. We&amp;rsquo;re going use the &lt;em&gt;pattern tracker&lt;/em&gt; to hold our values for &lt;em&gt;fill&lt;/em&gt;, &lt;em&gt;length&lt;/em&gt; and &lt;em&gt;rotation&lt;/em&gt; for four drum sequences. Input 0 will be reset, and input 1 will be clock. The four trigger outputs A-D will trigger our drum modules.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;I:&lt;/code&gt; set the time &lt;code&gt;T&lt;/code&gt; to 0&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span&gt;&lt;/span&gt;T 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;SCRIPT 1:&lt;/code&gt; reset the time &lt;code&gt;T&lt;/code&gt; to 0&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span&gt;&lt;/span&gt;T 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;SCRIPT 2:&lt;/code&gt; trigger scripts 3-6, increase &lt;code&gt;T&lt;/code&gt; by 1&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span&gt;&lt;/span&gt;SCRIPT 3
SCRIPT 4
SCRIPT 5
SCRIPT 6
T ADD 1 T
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;SCRIPT 3:&lt;/code&gt; read &lt;em&gt;fill&lt;/em&gt;, &lt;em&gt;length&lt;/em&gt; and &lt;em&gt;rotation&lt;/em&gt; from the first 3 rows respectively of column 0 of the pattern data&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span&gt;&lt;/span&gt;X PN 0 2
Y ER PN 0 0 PN 0 1 SUB T X
IF Y : TR.PULSE A
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;SCRIPT 4:&lt;/code&gt; as script 3, but use column 1&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span&gt;&lt;/span&gt;X PN 1 2
Y ER PN 1 0 PN 1 1 SUB T X
IF Y : TR.PULSE B
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;SCRIPT 5:&lt;/code&gt; as script 3, but use column 2&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span&gt;&lt;/span&gt;X PN 2 2
Y ER PN 2 0 PN 2 1 SUB T X
IF Y : TR.PULSE C
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;SCRIPT 6:&lt;/code&gt; as scripts 3 but use column 3&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span&gt;&lt;/span&gt;X PN 3 2
Y ER PN 3 0 PN 3 1 SUB T X
IF Y : TR.PULSE D
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;PATTERN:&lt;/code&gt; each column contains the &lt;em&gt;fill&lt;/em&gt; in the first row, the &lt;em&gt;length&lt;/em&gt; in the second and the &lt;em&gt;rotation&lt;/em&gt; in the third for the four sequences&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span&gt;&lt;/span&gt;0|   4   6   4   9
1|  16  16  16  16
2|   0   2   2   0
3|   .   .   .   .
4|   .   .   .   .
.|
.|
.|
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Start your clock and play around with the values on the &lt;em&gt;pattern tracker&lt;/em&gt; (you can use the &lt;code&gt;[&lt;/code&gt; and &lt;code&gt;]&lt;/code&gt; keys to increment and decrement the value under the cursor too).&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:fn-bugfix&#34;&gt;And the &lt;a href=&#34;https://github.com/tehn/mod/pull/73&#34;&gt;bug fix&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fn-bugfix&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:fn-citation&#34;&gt;Toussaint, G. T. (2005, July). The Euclidean algorithm generates traditional musical rhythms. &lt;em&gt;In Proceedings of BRIDGES: Mathematical Connections in Art, Music and Science&lt;/em&gt; (pp. 47-56).
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fn-citation&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:fn-values&#34;&gt;As an aside, the values for all the Euclidean rhythms have been precomputed and saved as jagged C arrays (~2kb) to avoid having to perform Bjorklund&amp;rsquo;s algorithm on the Teletype.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fn-values&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:fn-yet&#34;&gt;&lt;a href=&#34;https://github.com/samdoshi/monome-mod/commit/5cf6dd2&#34;&gt;Well&amp;hellip;, maybe not yet&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fn-yet&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>