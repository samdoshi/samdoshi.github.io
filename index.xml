<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sam Doshi</title>
    <link>http://samdoshi.com/</link>
    <description>Recent content on Sam Doshi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Sun, 20 Mar 2016 16:00:00 +0000</lastBuildDate>
    <atom:link href="http://samdoshi.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>An introduction to Git submodules</title>
      <link>http://samdoshi.com/post/2016/03/git-submodules/</link>
      <pubDate>Sun, 20 Mar 2016 16:00:00 +0000</pubDate>
      
      <guid>http://samdoshi.com/post/2016/03/git-submodules/</guid>
      <description>

&lt;p&gt;Over on the Monome online community &lt;a href=&#34;http://llllllll.co/t/github-reorganization/2698?u=sam&#34;&gt;lines&lt;/a&gt;, we&amp;rsquo;ve been discussing breaking up the monolithic git repository used for the &lt;a href=&#34;http://monome.org/modular/&#34;&gt;Eurorack&lt;/a&gt; modules&amp;rsquo; &lt;a href=&#34;https://github.com/tehn/mod&#34;&gt;firmware&lt;/a&gt;. This is just a brief overview of Git submodules to see if they are a good fit for us.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A submodule allows you to keep another Git repository in a subdirectory of your repository. The other repository has its own history, which does not interfere with the history of the current repository. &lt;strong&gt;This can be used to have external dependencies such as third party libraries for example.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://git-scm.com/docs/git-submodule&#34;&gt;The Git submodule man page&lt;/a&gt;&lt;/em&gt; &lt;em&gt;(emphasis mine)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let&amp;rsquo;s work through a simple example to see how it works&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;setup:7a99bbb2a2f52bb257bf4e5f6f41c3fe&#34;&gt;Setup&lt;/h2&gt;

&lt;p&gt;First, we&amp;rsquo;ll make our shared library repo &lt;code&gt;lib&lt;/code&gt; and add some commits.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span&gt;&lt;/span&gt;mkdir lib
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; lib
git init
touch a
git add a
git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;quot;added a&amp;quot;&lt;/span&gt;
git mv a b
git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;quot;mv a b&amp;quot;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ..
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, let&amp;rsquo;s create a repo &lt;code&gt;repo1&lt;/code&gt; (that will use the library via a submodule).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span&gt;&lt;/span&gt;mkdir repo1
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; repo1
git init
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ..
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This gives us the following files (via &lt;code&gt;tree&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;.
├── lib
│   └── b
└── repo1
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let&amp;rsquo;s add the submodule to &lt;code&gt;repo1&lt;/code&gt; as the directory &lt;code&gt;common&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; repo1
git submodule add ../lib common
git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;quot;added submodule&amp;quot;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ..
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And again, the output of &lt;code&gt;tree&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;.
├── lib
│   └── b
└── repo1
    └── common
        └── b
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we have a repo &lt;code&gt;repo1&lt;/code&gt; that contains a submodule in the directory &lt;code&gt;common&lt;/code&gt; from repo &lt;code&gt;lib&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;making-changes-to-lib:7a99bbb2a2f52bb257bf4e5f6f41c3fe&#34;&gt;Making changes to &lt;code&gt;lib&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s make a change to &lt;code&gt;lib&lt;/code&gt; to demonstrate what submodules allow us to do.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; lib
git mv b c
git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;quot;mv b c&amp;quot;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ..
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Again, consider the output of &lt;code&gt;tree&lt;/code&gt;. Notice how &lt;code&gt;repo1/common&lt;/code&gt; still contains &lt;code&gt;b&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;.
├── lib
│   └── c
└── repo1
    └── common
        └── b
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let&amp;rsquo;s clone &lt;code&gt;repo1&lt;/code&gt; to &lt;code&gt;repo1_clone&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span&gt;&lt;/span&gt;git clone repo1 repo1_clone
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That gives us:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;.
├── lib
│   └── c
├── repo1
│   └── common
│       └── b
└── repo1_clone
    └── common
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Hmm, why hasn&amp;rsquo;t &lt;code&gt;repo1_clone/common&lt;/code&gt; got any files in it?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; repo1_clone
git submodule update --init
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ..
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That&amp;rsquo;s better&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:7a99bbb2a2f52bb257bf4e5f6f41c3fe:fn-recursive&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:7a99bbb2a2f52bb257bf4e5f6f41c3fe:fn-recursive&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;.
├── lib
│   └── c
├── repo1
│   └── common
│       └── b
└── repo1_clone
    └── common
        └── b
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The important thing to note is that both &lt;code&gt;repo1&lt;/code&gt; and &lt;code&gt;repo1_clone&lt;/code&gt; still contain &lt;code&gt;b&lt;/code&gt; rather than &lt;code&gt;c&lt;/code&gt;. This is because Git tracks a particular commit for the submodule rather than a branch or &lt;code&gt;HEAD&lt;/code&gt;. You need to explicitly update the parent repo to track a new commit. This is great as it means changes to the upstream repo of the submodule are not forced upon us.&lt;/p&gt;

&lt;p&gt;The output of &lt;code&gt;git log --pretty=&amp;quot;format:%H %s&amp;quot;&lt;/code&gt; in the &lt;code&gt;lib&lt;/code&gt; repo is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1e5717c64e1150ca1da08521a24d8469c2bdde00 mv b c
86a5b293fa8f860730cd96c11b29b5f03fc2a60e mv a b
3c163ca8fcf336907e1b2a121f25bd550a71e5e3 added a
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The output of &lt;code&gt;git submodule status&lt;/code&gt; in &lt;code&gt;repo1&lt;/code&gt; is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;86a5b293fa8f860730cd96c11b29b5f03fc2a60e common (heads/master)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice how the commit SHA for the &lt;code&gt;common&lt;/code&gt; entry in &lt;code&gt;git submodule status&lt;/code&gt; matches the second entry in the log for &lt;code&gt;lib&lt;/code&gt;. This shouldn&amp;rsquo;t come as a surprise, as our submodule hasn&amp;rsquo;t been updated to the latest changes in &lt;code&gt;lib&lt;/code&gt; yet.&lt;/p&gt;

&lt;h2 id=&#34;updating-submodules:7a99bbb2a2f52bb257bf4e5f6f41c3fe&#34;&gt;Updating submodules&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s update &lt;code&gt;repo1&lt;/code&gt; to incorporate the changes made to &lt;code&gt;lib&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; repo1/common
git pull
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ..
git status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;On branch master
Changes not staged for commit:
  (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed)
  (use &amp;quot;git checkout -- &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working directory)

	modified:   common (new commits)

no changes added to commit (use &amp;quot;git add&amp;quot; and/or &amp;quot;git commit -a&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The output of &lt;code&gt;git status&lt;/code&gt; is telling us that we have modified &lt;code&gt;common&lt;/code&gt;, we need to commit those changes to &lt;code&gt;repo1&lt;/code&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:7a99bbb2a2f52bb257bf4e5f6f41c3fe:fn-change&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:7a99bbb2a2f52bb257bf4e5f6f41c3fe:fn-change&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span&gt;&lt;/span&gt;git add common
git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;quot;update common&amp;quot;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ..
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now the output of &lt;code&gt;tree&lt;/code&gt; is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;.
├── lib
│   └── c
├── repo1
│   └── common
│       └── c
└── repo1_clone
    └── common
        └── b
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The only thing left to do is to update &lt;code&gt;repo1_clone&lt;/code&gt; to reflect those changes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; repo1_clone
git pull
git submodule update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;git pull&lt;/code&gt; updates &lt;code&gt;repo1_clone&lt;/code&gt; to match &lt;code&gt;repo1&lt;/code&gt;, but won&amp;rsquo;t update the &lt;code&gt;common&lt;/code&gt; directory. Assuming that &lt;code&gt;common&lt;/code&gt; is clean, you can run &lt;code&gt;git submodule update&lt;/code&gt; to update &lt;code&gt;common&lt;/code&gt; to the correct commit of &lt;code&gt;lib&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The final output of &lt;code&gt;tree&lt;/code&gt; is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;.
├── lib
│   └── c
├── repo1
│   └── common
│       └── c
└── repo1_clone
    └── common
        └── c
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;taking-things-further:7a99bbb2a2f52bb257bf4e5f6f41c3fe&#34;&gt;Taking things further&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;common&lt;/code&gt; directories in &lt;code&gt;repo1&lt;/code&gt; and &lt;code&gt;repo1_clone&lt;/code&gt; are normal Git repos, that are cloned from &lt;code&gt;lib&lt;/code&gt;. You can do all the normal things inside them that you would in any other Git repo: &lt;code&gt;branch&lt;/code&gt;, &lt;code&gt;checkout&lt;/code&gt;, &lt;code&gt;commit&lt;/code&gt;, &lt;code&gt;pull&lt;/code&gt; and even &lt;code&gt;push&lt;/code&gt;. So if the work you&amp;rsquo;re doing on the &lt;code&gt;lib&lt;/code&gt; repo is best done in the context of &lt;code&gt;repo1&lt;/code&gt;, you can make your changes and commits in &lt;code&gt;repo1/common&lt;/code&gt;&amp;mdash;you just need to remember to commit the directory &lt;code&gt;common&lt;/code&gt; to &lt;code&gt;repo1&lt;/code&gt; when you want &lt;code&gt;repo1&lt;/code&gt; to be updated to reference the new commits you&amp;rsquo;ve made to &lt;code&gt;lib&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:7a99bbb2a2f52bb257bf4e5f6f41c3fe:fn-recursive&#34;&gt;As an aside, we could have used &lt;code&gt;git clone repo1 repo1_clone --recursive&lt;/code&gt; for our initial clone to avoid having to use &lt;code&gt;git submodule update --init&lt;/code&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:7a99bbb2a2f52bb257bf4e5f6f41c3fe:fn-recursive&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:7a99bbb2a2f52bb257bf4e5f6f41c3fe:fn-change&#34;&gt;If we change our mind, we can run &lt;code&gt;git submodule update&lt;/code&gt; to revert the submodule (assuming that it is &lt;em&gt;clean&lt;/em&gt;)
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:7a99bbb2a2f52bb257bf4e5f6f41c3fe:fn-change&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Euclidean rhythms on the Monome Teletype</title>
      <link>http://samdoshi.com/post/2016/03/teletype-euclidean/</link>
      <pubDate>Sun, 20 Mar 2016 14:00:00 +0000</pubDate>
      
      <guid>http://samdoshi.com/post/2016/03/teletype-euclidean/</guid>
      <description>

&lt;p&gt;Earlier this year I did some work on a Euclidean rhythm operator for the &lt;a href=&#34;http://monome.org/docs/modular/teletype/&#34;&gt;Monome Teletype&lt;/a&gt;. Here is the &lt;a href=&#34;https://github.com/tehn/mod/pull/68&#34;&gt;pull request&lt;/a&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:d872790bb8e0a4c6a0054e207d563af0:fn-bugfix&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:d872790bb8e0a4c6a0054e207d563af0:fn-bugfix&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, the &lt;a href=&#34;https://github.com/tehn/mod/releases/tag/v1.12&#34;&gt;beta firmware&lt;/a&gt;, and there is also a thread to discuss it on &lt;a href=&#34;http://llllllll.co/t/a-euclidean-rhythm-operator-for-the-teletype/2344?u=sam&#34;&gt;lines&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;video-container&#34;&gt;
    &lt;iframe class=&#34;youtube-player&#34; type=&#34;text/html&#34; width=&#34;100%&#34; height=&#34;auto&#34; src=&#34;https://www.youtube.com/embed/f2FMVaVkiDo&#34; allowfullscreen frameborder=&#34;0&#34;&gt;
    &lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;euclidean-rhythms:d872790bb8e0a4c6a0054e207d563af0&#34;&gt;Euclidean rhythms&lt;/h2&gt;

&lt;p&gt;Euclidean rhythms were first described by Godfried Toussaint in his 2005 paper &lt;a href=&#34;http://cgm.cs.mcgill.ca/~godfried/publications/banff.pdf&#34;&gt;&amp;ldquo;The Euclidean Algorithm Generates Traditional Musical Rhythms&amp;rdquo;&lt;/a&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:d872790bb8e0a4c6a0054e207d563af0:fn-citation&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:d872790bb8e0a4c6a0054e207d563af0:fn-citation&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;. From the abstract:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;em&gt;Euclidean&lt;/em&gt; algorithm (which comes down to us from Euclid&amp;rsquo;s &lt;em&gt;Elements&lt;/em&gt;) computes the greatest common divisor of two given integers. It is shown here that the structure of the Euclidean algorithm may be used to generate, very efficiently, a large family of rhythms used as timelines (&lt;em&gt;ostinatos&lt;/em&gt;), in sub-Saharan African music in particular, and world music in general. These rhythms, here dubbed &lt;em&gt;Euclidean&lt;/em&gt; rhythms, have the property that their onset patterns are distributed as evenly as possible.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once you&amp;rsquo;re more familiar with how they work, it&amp;rsquo;s well worth having a look through the &lt;a href=&#34;http://cgm.cs.mcgill.ca/~godfried/publications/banff.pdf&#34;&gt;paper&lt;/a&gt;. There is plenty of interesting information in there (along with all the maths).&lt;/p&gt;

&lt;p&gt;In essence a Euclidean rhythm evenly spreads out a numbers of beats (or &lt;em&gt;fill&lt;/em&gt;), along a repeating sequence of a given &lt;em&gt;length&lt;/em&gt;. Thus, the Euclidean rhythm &lt;em&gt;fill=4, length=16&lt;/em&gt;, is &lt;code&gt;x...x...x...x...&lt;/code&gt; (a.k.a. four on the floor at 16&lt;sup&gt;th&lt;/sup&gt; beats). Given that the rhythm repeats, this is more efficiently given as &lt;em&gt;fill=1, length=4&lt;/em&gt;: &lt;code&gt;x...&lt;/code&gt;. More interesting examples are in the &lt;a href=&#34;http://cgm.cs.mcgill.ca/~godfried/publications/banff.pdf&#34;&gt;paper&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;on-the-teletype:d872790bb8e0a4c6a0054e207d563af0&#34;&gt;On the Teletype&lt;/h2&gt;

&lt;p&gt;On the Teletype, Euclidean rhythms are implemented with a new operator, &lt;code&gt;ER&lt;/code&gt; as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ER fill length step
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The operator either returns a &lt;code&gt;0&lt;/code&gt; (i.e. no beat) or a &lt;code&gt;1&lt;/code&gt; (a beat) for a given Euclidean rhythm, where &lt;em&gt;fill&lt;/em&gt; is the number of played beats and &lt;em&gt;length&lt;/em&gt; is the length of a single sequence (as previously described). The 3&lt;sup&gt;rd&lt;/sup&gt; parameter, &lt;em&gt;step&lt;/em&gt;, is the value of the rhythm at a given step. Particular care must be given as &lt;em&gt;step&lt;/em&gt; is &lt;strong&gt;0-based&lt;/strong&gt; like many other operations on the Teletype, i.e. the first step is 0, and the last step in a sequence that has length 16 is 15!&lt;/p&gt;

&lt;p&gt;Both &lt;em&gt;fill&lt;/em&gt; and &lt;em&gt;length&lt;/em&gt; accept values between 1 and 32 inclusive&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:d872790bb8e0a4c6a0054e207d563af0:fn-values&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:d872790bb8e0a4c6a0054e207d563af0:fn-values&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;, where &lt;em&gt;fill&lt;/em&gt; &amp;le; &lt;em&gt;length&lt;/em&gt;. &lt;em&gt;Step&lt;/em&gt; may be any number&amp;mdash;it is modulo (or wrapped) with the length, so that it is always in bounds. Any invalid input results in the operator returning a &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;some-simple-examples:d872790bb8e0a4c6a0054e207d563af0&#34;&gt;Some simple examples&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s look at the example of &lt;em&gt;fill=4, length=16&lt;/em&gt;, i.e. &lt;code&gt;x...x...x...x...&lt;/code&gt;. (These are best entered in &lt;em&gt;LIVE mode&lt;/em&gt;.)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ER 4 16 0&lt;/code&gt; returns a &lt;code&gt;1&lt;/code&gt; &lt;small&gt;(remember 0 is the first step)&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ER 4 16 1&lt;/code&gt; returns a &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ER 4 16 2&lt;/code&gt; returns a &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ER 4 16 3&lt;/code&gt; returns a &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ER 4 16 4&lt;/code&gt; returns a &lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ER 4 16 -1&lt;/code&gt; returns a &lt;code&gt;0&lt;/code&gt; &lt;small&gt;(negative indices can be useful as we&amp;rsquo;ll see&amp;hellip;)&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ER 4 16 -4&lt;/code&gt; returns a &lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s create a simple script that outputs a four on the floor rhythm by using the &lt;code&gt;ER&lt;/code&gt; operator. Enter the following scripts as &lt;code&gt;I&lt;/code&gt; and &lt;code&gt;SCRIPT 1&lt;/code&gt;, and then supply a 16&lt;sup&gt;th&lt;/sup&gt; note trigger to input 1.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;I:&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;T 0
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;SCRIPT 1:&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span&gt;&lt;/span&gt;IF ER 4 16 T : TR.PULSE A
T ADD 1 T
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We&amp;rsquo;re using &lt;code&gt;T&lt;/code&gt; to hold which step we&amp;rsquo;re on. We can update &lt;code&gt;SCRIPT 1&lt;/code&gt; to add a second output:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SCRIPT 1:&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span&gt;&lt;/span&gt;IF ER 4 16 T : TR.PULSE A
IF ER 6 16 T : TR.PULSE B
T ADD 1 T
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;onset-or-rotation-or-offset:d872790bb8e0a4c6a0054e207d563af0&#34;&gt;Onset (or rotation or offset)&lt;/h2&gt;

&lt;p&gt;You might have noticed while playing with the above example that certain combinations of rhythms can&amp;rsquo;t be achieved as things stand, for example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span&gt;&lt;/span&gt;A: x...x...x...x...
B: ..x...x...x...x.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In order to create this rhythm we need to &lt;em&gt;rotate&lt;/em&gt; one rhythm against the other. This is sometimes call the offset or the onset. In fact in our example rhythm B is the same A, but rotated 2 steps forwards (or backwards). Let&amp;rsquo;s modify &lt;code&gt;SCRIPT 1&lt;/code&gt; again:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SCRIPT 1:&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span&gt;&lt;/span&gt;IF ER 4 16 T : TR.PULSE A
Y SUB T 2
IF ER 4 16 Y : TR.PULSE B
T ADD 1 T
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We&amp;rsquo;ve had to introduce another variable &lt;code&gt;Y&lt;/code&gt; as we can&amp;rsquo;t fit everything on one line&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:d872790bb8e0a4c6a0054e207d563af0:fn-yet&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:d872790bb8e0a4c6a0054e207d563af0:fn-yet&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;. One thing that might not be obvious initially is that if we want to rotate a rhythm forwards we need to &lt;code&gt;SUB&lt;/code&gt;, if we want to rotate a rhythm backwards we need to &lt;code&gt;ADD&lt;/code&gt;. Thus if we want to use rotation with our Euclidean rhythms we can use the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span&gt;&lt;/span&gt;ER fill length SUB step rotation
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;where &lt;em&gt;rotation&lt;/em&gt; is the number of steps &lt;em&gt;forward&lt;/em&gt; we wish to rotate the rhythm.&lt;/p&gt;

&lt;h2 id=&#34;a-four-channel-euclidean-drum-machine:d872790bb8e0a4c6a0054e207d563af0&#34;&gt;A four channel Euclidean drum machine&lt;/h2&gt;

&lt;p&gt;Finally, let&amp;rsquo;s recreate part of the drum machine from the video at the top of the page. We&amp;rsquo;re going use the &lt;em&gt;pattern tracker&lt;/em&gt; to hold our values for &lt;em&gt;fill&lt;/em&gt;, &lt;em&gt;length&lt;/em&gt; and &lt;em&gt;rotation&lt;/em&gt; for four drum sequences. Input 0 will be reset, and input 1 will be clock. The four trigger outputs A-D will trigger our drum modules.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;I:&lt;/code&gt; set the time &lt;code&gt;T&lt;/code&gt; to 0&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span&gt;&lt;/span&gt;T 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;SCRIPT 1:&lt;/code&gt; reset the time &lt;code&gt;T&lt;/code&gt; to 0&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span&gt;&lt;/span&gt;T 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;SCRIPT 2:&lt;/code&gt; trigger scripts 3-6, increase &lt;code&gt;T&lt;/code&gt; by 1&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SCRIPT 3
SCRIPT 4
SCRIPT 5
SCRIPT 6
T ADD 1 T
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;SCRIPT 3:&lt;/code&gt; read &lt;em&gt;fill&lt;/em&gt;, &lt;em&gt;length&lt;/em&gt; and &lt;em&gt;rotation&lt;/em&gt; from the first 3 rows respectively of column 0 of the pattern data&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span&gt;&lt;/span&gt;X PN 0 2
Y ER PN 0 0 PN 0 1 SUB T X
IF Y : TR.PULSE A
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;SCRIPT 4:&lt;/code&gt; as script 3, but use column 1&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span&gt;&lt;/span&gt;X PN 1 2
Y ER PN 1 0 PN 1 1 SUB T X
IF Y : TR.PULSE B
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;SCRIPT 5:&lt;/code&gt; as script 3, but use column 2&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span&gt;&lt;/span&gt;X PN 2 2
Y ER PN 2 0 PN 2 1 SUB T X
IF Y : TR.PULSE C
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;SCRIPT 6:&lt;/code&gt; as scripts 3 but use column 3&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span&gt;&lt;/span&gt;X PN 3 2
Y ER PN 3 0 PN 3 1 SUB T X
IF Y : TR.PULSE D
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;PATTERN:&lt;/code&gt; each column contains the &lt;em&gt;fill&lt;/em&gt; in the first row, the &lt;em&gt;length&lt;/em&gt; in the second and the &lt;em&gt;rotation&lt;/em&gt; in the third for the four sequences&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span&gt;&lt;/span&gt;0|   4   6   4   9
1|  16  16  16  16
2|   0   2   2   0
3|   .   .   .   .
4|   .   .   .   .
.|
.|
.|
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Start your clock and play around with the values on the &lt;em&gt;pattern tracker&lt;/em&gt; (you can use the &lt;code&gt;[&lt;/code&gt; and &lt;code&gt;]&lt;/code&gt; keys to increment and decrement the value under the cursor too).&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:d872790bb8e0a4c6a0054e207d563af0:fn-bugfix&#34;&gt;And the &lt;a href=&#34;https://github.com/tehn/mod/pull/73&#34;&gt;bug fix&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:d872790bb8e0a4c6a0054e207d563af0:fn-bugfix&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:d872790bb8e0a4c6a0054e207d563af0:fn-citation&#34;&gt;Toussaint, G. T. (2005, July). The Euclidean algorithm generates traditional musical rhythms. &lt;em&gt;In Proceedings of BRIDGES: Mathematical Connections in Art, Music and Science&lt;/em&gt; (pp. 47-56).
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:d872790bb8e0a4c6a0054e207d563af0:fn-citation&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:d872790bb8e0a4c6a0054e207d563af0:fn-values&#34;&gt;As an aside, the values for all the Euclidean rhythms have been precomputed and saved as jagged C arrays (~2kb) to avoid having to perform Bjorklund&amp;rsquo;s algorithm on the Teletype.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:d872790bb8e0a4c6a0054e207d563af0:fn-values&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:d872790bb8e0a4c6a0054e207d563af0:fn-yet&#34;&gt;&lt;a href=&#34;https://github.com/samdoshi/monome-mod/commit/5cf6dd2&#34;&gt;Well&amp;hellip;, maybe not yet&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:d872790bb8e0a4c6a0054e207d563af0:fn-yet&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>